{"ast":null,"code":"const IronTree = require('@denq/iron-tree');\nconst defaultOptions = {\n  key_id: 'id',\n  key_parent: 'parent',\n  key_child: 'child',\n  empty_children: false\n};\nconst depthKeyName = '__depth';\nfunction sortBy(collection, propertyA, propertyB, propertyC) {\n  return collection.sort(function (a, b) {\n    return a[propertyA] - b[propertyA] || a[propertyB] - b[propertyB] || a[propertyC] - b[propertyC];\n  });\n}\n;\nfunction writeDepth(parentKeyName, keyName, remainingList, currentDepth = 0, parentIds = [0]) {\n  if (remainingList.length === 0) return;\n  const nextParentIds = [];\n  const nextRemainingList = [];\n  remainingList.forEach(item => {\n    if (parentIds.includes(item[parentKeyName])) {\n      item[depthKeyName] = currentDepth;\n      nextParentIds.push(item[keyName]);\n    } else {\n      nextRemainingList.push(item);\n    }\n  });\n  // if invalid list exists, the process is over\n  if (remainingList.length === nextRemainingList.length) return;\n  writeDepth(parentKeyName, keyName, nextRemainingList, currentDepth + 1, nextParentIds);\n}\n;\nmodule.exports = class LTT {\n  constructor(list, options = {}) {\n    const _list = list.map(item => item);\n    options = Object.assign({}, defaultOptions, options);\n    this.options = options;\n    const {\n      key_id,\n      key_parent\n    } = options;\n    writeDepth(key_parent, key_id, _list);\n    sortBy(_list, depthKeyName, key_parent, key_id);\n    const tree = new IronTree({\n      [key_id]: 0\n    });\n    _list.forEach((item, index) => {\n      tree.add(parentNode => {\n        return parentNode.get(key_id) === item[key_parent];\n      }, item);\n    });\n    this.tree = tree;\n  }\n  sort(criteria) {\n    this.tree.sort(criteria);\n  }\n  GetTree() {\n    const {\n      key_child,\n      empty_children\n    } = this.options;\n    return this.tree.toJson({\n      key_children: key_child,\n      empty_children\n    })[key_child];\n  }\n};","map":{"version":3,"names":["IronTree","require","defaultOptions","key_id","key_parent","key_child","empty_children","depthKeyName","sortBy","collection","propertyA","propertyB","propertyC","sort","a","b","writeDepth","parentKeyName","keyName","remainingList","currentDepth","parentIds","length","nextParentIds","nextRemainingList","forEach","item","includes","push","module","exports","LTT","constructor","list","options","_list","map","Object","assign","tree","index","add","parentNode","get","criteria","GetTree","toJson","key_children"],"sources":["E:/WebUI_MH/node_modules/list-to-tree/dist/list-to-tree.js"],"sourcesContent":["const IronTree = require('@denq/iron-tree');\n\nconst defaultOptions = {\n  key_id: 'id' ,\n  key_parent: 'parent' ,\n  key_child: 'child',\n  empty_children: false,\n};\n\nconst depthKeyName = '__depth'\n\nfunction sortBy(collection, propertyA, propertyB, propertyC) {\n  return collection.sort(function(a, b) {\n    return a[propertyA] - b[propertyA] || a[propertyB] - b[propertyB] || a[propertyC] - b[propertyC];\n  });\n};\n\nfunction writeDepth(parentKeyName, keyName, remainingList, currentDepth = 0, parentIds = [0]) {\n  if (remainingList.length === 0) return;\n  const nextParentIds = []\n  const nextRemainingList = []\n  remainingList.forEach((item) => {\n    if (parentIds.includes(item[parentKeyName])) {\n      item[depthKeyName] = currentDepth\n      nextParentIds.push(item[keyName])\n    } else {\n      nextRemainingList.push(item)\n    }\n  })\n  // if invalid list exists, the process is over\n  if(remainingList.length === nextRemainingList.length) return;\n  writeDepth(parentKeyName, keyName, nextRemainingList, currentDepth + 1, nextParentIds)\n};\n\nmodule.exports = class LTT{\n\n  constructor(list, options = {}) {\n    const _list = list.map((item) => item);\n\n    options = Object.assign({}, defaultOptions, options);\n    this.options = options;\n    const { key_id, key_parent } = options;\n\n    writeDepth(key_parent, key_id, _list)\n    sortBy(_list, depthKeyName, key_parent, key_id);\n\n    const tree = new IronTree({ [key_id]: 0 });\n    _list.forEach((item, index) => {\n      tree.add((parentNode) => {\n        return parentNode.get(key_id) === item[key_parent];\n      }, item);\n    });\n\n    this.tree = tree;\n  }\n\n  sort(criteria) {\n    this.tree.sort(criteria);\n  }\n\n  GetTree() {\n    const { key_child, empty_children } = this.options;\n    return this.tree.toJson({\n      key_children: key_child,\n      empty_children\n    })[key_child];\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}