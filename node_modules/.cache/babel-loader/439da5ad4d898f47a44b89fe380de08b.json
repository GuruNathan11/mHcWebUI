{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridApiMethod, useGridNativeEventListener, useGridLogger, useGridSelector, gridVirtualizationColumnEnabledSelector } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName, gridColumnsStateSelector, useOnMount, useTimeout, createControllablePromise } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField, findGridHeader, findGridCells } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (e.g. zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      var _getAttribute, _cell$firstElementChi, _cell$firstElementChi2;\n      const id = (_getAttribute = cell.parentElement.getAttribute('data-id')) != null ? _getAttribute : '';\n      const hasAutoHeight = apiRef.current.rowHasAutoHeight(id);\n      if (hasAutoHeight) {\n        var _computedWidth;\n        return (_computedWidth = column.computedWidth) != null ? _computedWidth : column.width;\n      }\n      const style = window.getComputedStyle(cell, null);\n      const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n      const contentWidth = (_cell$firstElementChi = (_cell$firstElementChi2 = cell.firstElementChild) == null ? void 0 : _cell$firstElementChi2.getBoundingClientRect().width) != null ? _cell$firstElementChi : 0;\n      return paddingWidth + contentWidth;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const element = title != null ? title : content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = paddingWidth + contentWidth;\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme();\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    if (colDefRef.current) {\n      apiRef.current.setColumnWidth(colDefRef.current.field, colDefRef.current.width);\n      logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum, _apiRef$current$colum2;\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (colElementRef.current) {\n      colElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, colElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum3, _apiRef$current$heade, _apiRef$current$colum4;\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    const headerFilterRowElement = (_apiRef$current$heade = apiRef.current.headerFiltersElementRef) == null ? void 0 : _apiRef$current$heade.current;\n    if (headerFilterRowElement) {\n      headerFilterElementRef.current = headerFilterRowElement.querySelector(`[data-field=\"${colDef.field}\"]`);\n    }\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    var _apiRef$current$rootE, _userOptions$columns;\n    const root = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: (_userOptions$columns = userOptions == null ? void 0 : userOptions.columns) != null ? _userOptions$columns : state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        var _apiRef$current$getRo, _apiRef$current$getRo2;\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => {\n          var _ref, _widthByField$column$;\n          return total + ((_ref = (_widthByField$column$ = widthByField[column.field]) != null ? _widthByField$column$ : column.computedWidth) != null ? _ref : column.width);\n        }, 0);\n        const availableWidth = (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventCallback","gridClasses","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridNativeEventListener","useGridLogger","useGridSelector","gridVirtualizationColumnEnabledSelector","clamp","findParentElementFromClassName","gridColumnsStateSelector","useOnMount","useTimeout","createControllablePromise","useTheme","findGridCellElementsFromCol","getFieldFromHeaderElem","findHeaderElementFromField","findGroupHeaderElementsFromField","findGridHeader","findGridCells","DEFAULT_GRID_AUTOSIZE_OPTIONS","cachedSupportsTouchActionNone","doesSupportTouchActionNone","undefined","CSS","supports","trackFinger","event","currentTouchId","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","element","direction","classList","contains","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","value","useEffect","current","resolve","asyncCheck","Promise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","field","widths","map","cell","_getAttribute","_cell$firstElementChi","_cell$firstElementChi2","id","parentElement","getAttribute","hasAutoHeight","rowHasAutoHeight","_computedWidth","computedWidth","width","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","firstElementChild","getBoundingClientRect","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","title","querySelector","columnHeaderTitle","content","columnHeaderTitleContainerContent","scrollWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","remove","columnResizeStateInitializer","state","columnResize","resizingColumnField","useGridColumnResize","props","logger","colDefRef","colElementRef","headerFilterElementRef","colGroupingElementRef","colCellElementsRef","theme","stopResizeEventTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","flex","headerFilterElement","div","finalWidth","finishResize","nativeEvent","stopListening","setColumnWidth","start","publishEvent","handleResizeMouseUp","handleResizeMouseMove","buttons","params","colDef","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","_apiRef$current$colum","_apiRef$current$colum2","cellSeparator","target","columnHeader","getColumn","columnHeadersContainerElementRef","columnHeadersElementRef","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","setState","forceUpdate","handleResizeStop","handleColumnResizeMouseDown","_apiRef$current$colum3","_apiRef$current$heade","_apiRef$current$colum4","button","headerFilterRowElement","headerFiltersElementRef","cursor","handleColumnSeparatorDoubleClick","disableAutosize","lookup","resizable","autosizeColumns","autosizeOptions","columnVirtualizationDisabled","isAutosizingRef","userOptions","_apiRef$current$rootE","_userOptions$columns","orderedFields","c","columnVisibilityModel","unstable_setColumnVirtualization","newColumns","expand","_apiRef$current$getRo","_apiRef$current$getRo2","visibleColumns","totalWidth","reduce","total","_ref","_widthByField$column$","availableWidth","getRootDimensions","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","autosizeOnMount","then","_apiRef$current$colum5","passive","onColumnResize","onColumnWidthChange"],"sources":["E:/react/WebUI_MH/node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridApiMethod, useGridNativeEventListener, useGridLogger, useGridSelector, gridVirtualizationColumnEnabledSelector } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName, gridColumnsStateSelector, useOnMount, useTimeout, createControllablePromise } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField, findGridHeader, findGridCells } from '../../../utils/domUtils';\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from './gridColumnResizeApi';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n  return cachedSupportsTouchActionNone;\n}\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef();\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (e.g. zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      var _getAttribute, _cell$firstElementChi, _cell$firstElementChi2;\n      const id = (_getAttribute = cell.parentElement.getAttribute('data-id')) != null ? _getAttribute : '';\n      const hasAutoHeight = apiRef.current.rowHasAutoHeight(id);\n      if (hasAutoHeight) {\n        var _computedWidth;\n        return (_computedWidth = column.computedWidth) != null ? _computedWidth : column.width;\n      }\n      const style = window.getComputedStyle(cell, null);\n      const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n      const contentWidth = (_cell$firstElementChi = (_cell$firstElementChi2 = cell.firstElementChild) == null ? void 0 : _cell$firstElementChi2.getBoundingClientRect().width) != null ? _cell$firstElementChi : 0;\n      return paddingWidth + contentWidth;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const element = title != null ? title : content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = paddingWidth + contentWidth;\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const headerFilterElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme();\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef();\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    const headerFilterElement = headerFilterElementRef.current;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n      headerFilterElement.style.minWidth = `${newWidth}px`;\n      headerFilterElement.style.maxWidth = `${newWidth}px`;\n    }\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    if (colDefRef.current) {\n      apiRef.current.setColumnWidth(colDefRef.current.field, colDefRef.current.width);\n      logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum, _apiRef$current$colum2;\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (colElementRef.current) {\n      colElementRef.current.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, colElementRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum3, _apiRef$current$heade, _apiRef$current$colum4;\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    const headerFilterRowElement = (_apiRef$current$heade = apiRef.current.headerFiltersElementRef) == null ? void 0 : _apiRef$current$heade.current;\n    if (headerFilterRowElement) {\n      headerFilterElementRef.current = headerFilterRowElement.querySelector(`[data-field=\"${colDef.field}\"]`);\n    }\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    var _apiRef$current$rootE, _userOptions$columns;\n    const root = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef.current.state);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: (_userOptions$columns = userOptions == null ? void 0 : userOptions.columns) != null ? _userOptions$columns : state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      apiRef.current.unstable_setColumnVirtualization(false);\n      await columnVirtualizationDisabled();\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field]\n      }));\n      if (options.expand) {\n        var _apiRef$current$getRo, _apiRef$current$getRo2;\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => {\n          var _ref, _widthByField$column$;\n          return total + ((_ref = (_widthByField$column$ = widthByField[column.field]) != null ? _widthByField$column$ : column.computedWidth) != null ? _ref : column.width);\n        }, 0);\n        const availableWidth = (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n    } finally {\n      apiRef.current.unstable_setColumnVirtualization(true);\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}