{"ast":null,"code":"const Node = require('./node');\nconst searchNode = require('../utils/search-node');\nconst traversalTree = require('../utils/traversal-tree');\nconst serializeTree = require('../utils/serialize-tree');\nconst removeEmptyChildren = require('../utils/remove-empty-children');\nclass Tree {\n  constructor(object = undefined) {\n    this.rootNode = null;\n    if (object) {\n      this.rootNode = new Node(object);\n    }\n  }\n\n  // only for rootNode\n  get(path) {\n    return this.rootNode.get(path);\n  }\n\n  // only for rootNode\n  set(path, value) {\n    this.rootNode.set(path, value);\n  }\n  add(callback, object) {\n    const type = typeof callback;\n    if (type === 'string' && callback === 'root') {\n      this.rootNode = new Node(object);\n      return this;\n    } else if (type === 'function') {\n      const target = searchNode(this, null, callback);\n      if (target && target.add(object)) {\n        return this;\n      } else {\n        console.log('Warning', object);\n      }\n    }\n  }\n  contains(criteria) {\n    return searchNode(this, null, criteria);\n  }\n  remove(criteria) {\n    const targetNode = this.contains(criteria);\n    if (targetNode) {\n      return !!targetNode.parent.remove(criteria);\n    }\n    return false;\n  }\n  move(search, destination) {\n    const targetNode = this.contains(search);\n    if (targetNode && this.remove(search)) {\n      const destinationNode = this.contains(destination);\n      return !!destinationNode.add(targetNode);\n    }\n    return false;\n  }\n  traversal(criteria, callback) {\n    traversalTree(this, null, criteria, callback);\n  }\n  sort(compare) {\n    this.traversal(null, currentNode => {\n      currentNode.sort(compare);\n    });\n  }\n  toJson(options = {}) {\n    const optionsDefault = {\n      key_children: 'children',\n      empty_children: true\n    };\n    options = Object.assign(optionsDefault, options);\n    const result = serializeTree(this, null, [], options);\n    if (!options.empty_children) {\n      removeEmptyChildren(result, null, options);\n    }\n    if (result && result.length > 0) {\n      return result[0];\n    }\n  }\n}\nTree.Node = Node;\nmodule.exports = Tree;","map":{"version":3,"names":["Node","require","searchNode","traversalTree","serializeTree","removeEmptyChildren","Tree","constructor","object","undefined","rootNode","get","path","set","value","add","callback","type","target","console","log","contains","criteria","remove","targetNode","parent","move","search","destination","destinationNode","traversal","sort","compare","currentNode","toJson","options","optionsDefault","key_children","empty_children","Object","assign","result","length","module","exports"],"sources":["E:/react/WebUI_MH/node_modules/@denq/iron-tree/src/tree.js"],"sourcesContent":["const Node = require('./node');\nconst searchNode = require('../utils/search-node');\nconst traversalTree = require('../utils/traversal-tree');\nconst serializeTree = require('../utils/serialize-tree');\nconst removeEmptyChildren = require('../utils/remove-empty-children');\n\nclass Tree {\n  \n  constructor(object = undefined) {\n    this.rootNode = null;\n    if (object) {\n      this.rootNode = new Node(object);\n    }\n  }\n  \n  // only for rootNode\n  get(path) {\n    return this.rootNode.get(path);\n  }\n  \n  // only for rootNode\n  set(path, value) {\n    this.rootNode.set(path, value);\n  }\n  \n  add(callback, object) {\n    const type = typeof callback;\n    if (type === 'string' && callback === 'root') {\n      this.rootNode = new Node(object);\n      return this;\n    } else if (type === 'function') {\n      const target = searchNode(this, null, callback);\n      if (target && target.add(object)) {\n        return this;\n      } else {\n        console.log('Warning', object);\n      }\n    }\n  }\n  \n  contains(criteria) {\n    return searchNode(this, null, criteria);\n  }\n  \n  remove(criteria) {\n    const targetNode = this.contains(criteria);\n    if (targetNode) {\n      return !!targetNode.parent.remove(criteria);\n    }\n    return false;\n  }\n  \n  move(search, destination) {\n    const targetNode = this.contains(search);\n    if (targetNode && this.remove(search)) {\n      const destinationNode = this.contains(destination);\n      return !!destinationNode.add(targetNode);\n    }\n    return false;\n  }\n  \n  traversal(criteria, callback) {\n    traversalTree(this, null, criteria, callback);\n  }\n  \n  sort(compare) {\n    this.traversal(null, (currentNode) => {\n      currentNode.sort(compare);\n    });\n  }\n  \n  toJson(options = {}) {\n    const optionsDefault = {\n      key_children: 'children',\n      empty_children: true,\n    };\n    options = Object.assign(optionsDefault, options);\n    const result = serializeTree(this, null, [], options);\n    \n    if (!options.empty_children) {\n      removeEmptyChildren(result, null, options);\n    }\n    \n    if (result && result.length > 0) {\n      return result[0];\n    }\n  }\n}\n\nTree.Node = Node;\n\nmodule.exports = Tree; "],"mappings":"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"},"metadata":{},"sourceType":"script"}