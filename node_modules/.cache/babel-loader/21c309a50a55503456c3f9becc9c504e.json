{"ast":null,"code":"import { getCurrentUser } from \"../../../store/selectors/Accounts\";\nexport const IpAddress = \"http://66.169.158.106:7000/\";\nexport const USDATEFORMAT = \"MM-dd-yyyy\";\nexport const USCALDATEFORMAT = \"mm/dd/yy\";\nexport const SUPERADMINROLEID = 18616;\nexport const EMPLOYERADMINROLEID = 3;\nexport const EMPLOYEEROLEID = 5;\nexport const LAWFIRMADMINROLEID = 8;\nexport const ATTORNEYROLEID = 9;\nexport const ATTORNEYASSISTANTUSERROLEID = 13;\nexport const regexEmail = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nexport const EMPLOYEEROLENAME = \"EMPLOYEE\";\nexport const employeeRoleName = \"Employee\";\nexport const employerAdminRoleName = \"EmployerAdmin\";\nexport const employerAssistantRoleName = \"EmployerAssistant\";\nexport const PROVIDERADMINROLENAME = \"ProviderAdmin\";\nexport const VISACAREADMINROLENAME = \"VisaCareAdmin\";\nexport const ATTORNEYROLENAME = \"Attorney\";\nexport const ATTORNEYASSISTANTUSERROLENAME = \"Attorney Assistant\";\nexport const LAWFIRMADMIN = \"LawFirmAdmin\";\nexport const PROVIDERSUPPORTROLENAME = \"ProviderSupport\";\nexport const UICHECKROLENAME = \"UICHECK\";\nexport const curentUser = getCurrentUser();\nexport const specialCharactor = /[$!&=-]/;\nexport const numbersOnly = /^[0-9\\b]+$/;\nexport const usPhoneNumberFormat = /^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$/;\nexport const emailIdFormat = /^\\w+([\\.-]?\\w+)@\\w+([\\.-]?\\w+)(\\.\\w{2,3})+$/i;\nexport const PLANNAMEDYI = \"DIY\";\nexport const PLANNAMELEGAL = \"LEGAL\";\nexport const matchUPS1 = /\\b(1Z ?[0-9A-Z]{3} ?[0-9A-Z]{3} ?[0-9A-Z]{2} ?[0-9A-Z]{4} ?[0-9A-Z]{3} ?[0-9A-Z]|[\\dT]\\d\\d\\d ?\\d\\d\\d\\d ?\\d\\d\\d)\\b/;\nexport const matchUPS2 = /^[kKJj]{1}[0-9]{10}$/;\nexport const matchUSPS0 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)/;\nexport const matchUSPS1 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)|(\\b\\d{26}\\b)| ^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$| ^91[0-9]+$| ^[A-Za-z]{2}[0-9]+US$/i;\nexport const matchUSPS2 = /^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$/;\nexport const matchUSPS3 = /^91[0-9]+$/;\nexport const matchUSPS4 = /^[A-Za-z]{2}[0-9]+US$/;\nexport const matchUSPS5 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)|(\\b\\d{26}\\b)| ^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$| ^91[0-9]+$| ^[A-Za-z]{2}[0-9]+US$/i;\nexport const matchFedex1 = /(\\b96\\d{20}\\b)|(\\b\\d{15}\\b)|(\\b\\d{12}\\b)/;\nexport const matchFedex2 = /\\b((98\\d\\d\\d\\d\\d?\\d\\d\\d\\d|98\\d\\d) ?\\d\\d\\d\\d ?\\d\\d\\d\\d( ?\\d\\d\\d)?)\\b/;\nexport const matchFedex3 = /^[0-9]{15}$/;\nexport const caseNameJson = [{\n  id: 22,\n  casename: \"H1B Petition\",\n  urlName: \"visaCareH1BCaseDetails\"\n}, {\n  id: 23,\n  casename: \"H4 Application\",\n  urlName: \"visaCareH4CaseDetails\"\n},\n// { id: 24, casename: \"I140 Form\", urlName: \"visaCareI140CaseDetails\" },\n// { id: 25, casename: \"Labour Certification\", urlName: \"visaCareFLCCaseDetails\" },\n{\n  id: 26,\n  casename: \"EAD Application\",\n  urlName: \"visaCareI765CaseDetails\"\n} //,\n// { id: 27, casename: \"TN Petition\", urlName: \"visaCareTNPetitionDetails\" },\n//  { id: 28, casename: \"E3 Australian\", urlName: \"visaCareE3AustralianDetails\" },\n// { id: 29, casename: \"H1B1 Chile, Singapore\", urlName: \"visaCareH1B1CaseDetails\" }\n];\n\nexport const workFlowJson = [{\n  id: 1,\n  workFlowName: \"Initiated\"\n}, {\n  id: 2,\n  workFlowName: \"InProgress\"\n}, {\n  id: 3,\n  workFlowName: \"LCA Certified\"\n}, {\n  id: 4,\n  workFlowName: \"Submitted\"\n}, {\n  id: 5,\n  workFlowName: \"COMPLETED\"\n}, {\n  id: 6,\n  workFlowName: \"Completed\"\n}];\nexport const addressType = [{\n  id: 1,\n  addressType: \"PAD\",\n  addressTypeName: \"\"\n}, {\n  id: 2,\n  addressType: \"BAD\",\n  addressTypeName: \"\"\n}, {\n  id: 3,\n  addressType: \"BFA\",\n  addressTypeName: \"\"\n}, {\n  id: 4,\n  addressType: \"EEA\",\n  addressTypeName: \"\"\n}, {\n  id: 5,\n  addressType: \"PPA\",\n  addressTypeName: \"\"\n}, {\n  id: 6,\n  addressType: \"H1B1A\",\n  addressTypeName: \"\"\n}];\nexport const formatFirstName = value => {\n  const arr = value.split(\" \");\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n  }\n  const firstName = arr.join(\" \");\n  return firstName;\n};\nexport const formatSSNumber = value => {\n  if (!value) return value;\n  const ssNumber = value.replace(/[^\\d]/g, \"\");\n  const ssNumberLength = ssNumber.length;\n  if (ssNumberLength < 4) return ssNumber;\n  if (ssNumberLength < 6) {\n    return `${ssNumber.slice(0, 3)}-${ssNumber.slice(3)}`;\n  }\n  return `${ssNumber.slice(0, 3)}-${ssNumber.slice(3, 5)}-${ssNumber.slice(5, 9)}`;\n};\nexport const formatI94Number = value => {\n  if (!value) return value;\n  var newvalue = value.split(' ').join('');\n  return newvalue.split('').join(' ');\n};\nexport const formatPhoneNumber = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 7) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n};\nexport const numbersOnlyFormat = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n};\nexport const arrayOneToThirty = [{\n  id: 0\n}, {\n  id: 1\n}, {\n  id: 2\n}, {\n  id: 3\n}, {\n  id: 4\n}, {\n  id: 5\n}, {\n  id: 6\n}, {\n  id: 7\n}, {\n  id: 8\n}, {\n  id: 9\n}, {\n  id: 10\n}, {\n  id: 11\n}, {\n  id: 12\n}, {\n  id: 13\n}, {\n  id: 14\n}, {\n  id: 15\n}, {\n  id: 16\n}, {\n  id: 17\n}, {\n  id: 18\n}, {\n  id: 19\n}, {\n  id: 20\n}, {\n  id: 21\n}, {\n  id: 22\n}, {\n  id: 23\n}, {\n  id: 24\n}, {\n  id: 25\n}, {\n  id: 26\n}, {\n  id: 27\n}, {\n  id: 28\n}, {\n  id: 29\n}, {\n  id: 30\n}];\nexport const serviceCenter = [{\n  name: \"-Select-\",\n  address: \"\"\n}, {\n  name: \"Vermont Service Center (Non Premium)\",\n  address: \"USCIS Vermont Service Center Attn: I-129 H-1B, 38 River Road Essex Junction, VT 05452\"\n}, {\n  name: \"Vermont Service Center (Premium - CAP and Non CAP)\",\n  address: \"USCIS Vermont Service Center Attn: I-129 H-1B,30 River Road Essex Junction, VT 05452-3808\"\n}, {\n  name: \"Vermont Service Center (MASTER CAP SUBJECT)\",\n  address: \"USCIS Vermont Service Center Attn: I-129 H-1B Master’s Cap, 38 River Road Suite 1000 Essex Junction, VT 05452\"\n}, {\n  name: \"Vermont Service Center (REGULAR CAP SUBJECT)\",\n  address: \"USCIS Vermont Service Center Attn: I-129 H-1B Regular Cap, 38 River Road Suite 1000Essex Junction, VT 05452\"\n}, {\n  name: \"Nebraska Service Center (Non Premium)\",\n  address: \"USCIS Nebraska Service Center  850 S Street Lincoln, NE 68508\"\n}, {\n  name: \"Nebraska Service Center (Premium)\",\n  address: \"USCIS Nebraska Service Center 850 S Street Lincoln, NE 68508\"\n}, {\n  name: \"Nebraska Service Center (CAP SUBJECT)\",\n  address: \"USCIS Nebraska Service Center 850 ‘S’ Street Room 129CAP Lincoln, NE 6850\"\n}, {\n  name: \"Texas Service Center (Non Premium)\",\n  address: \"USCIS Texas Service Center Attn: I-129 H1B 6046 N Belt Line Rd. Irving, Texas 75038-0001\"\n}, {\n  name: \"Texas Service Center (Premium)\",\n  address: \"USCIS Texas Service Center Attn: I-129 H1B Premium Processing 6046 N Belt Line Rd. STE 907 Irving, TX 75038-0022\"\n}, {\n  name: \"Texas Service Center (CAP SUBJECT)\",\n  address: \"USCIS TSC Attn: H-1B CAP Filings 6046 N Belt Line Rd. STE 107 Irving, TX 75038-0001\"\n}, {\n  name: \"Texas Service Center (PREMIUM CAP SUBJECT)\",\n  address: \"USCIS TSC Attn: I-129 CAP Premium Processing 6046 N Belt Line Rd. STE 907 Irving, TX 75038-0022\"\n}, {\n  name: \"California Service Center (Non Premium)\",\n  address: \"USCIS California Service Center Attn: I-129 H-1B Extensions 24000 Avila Road 2nd Floor, Room 2312 Laguna Niguel, CA 92677\"\n}, {\n  name: \"California Service Center (Premium)\",\n  address: \"Premium Processing Service USCIS California Service Center Attn: I-129 H-1B Extensions 24000 Avila Road 2nd Floor, Room 2312 Laguna Niguel, CA 92677\"\n}, {\n  name: \"California Service Center (REGULAR-CAP SUBJECT)\",\n  address: \"USCIS California Service Center Attn: I-129 H-1B Regular Cap 24000 Avila Road 1st Floor, Room 1600 Laguna Niguel, CA 92677\"\n}, {\n  name: \"California Service Center (MASTER-CAP SUBJECT)\",\n  address: \"USCIS California Service CenterAttn: I-129 H-1B Master’s Cap 24000 Avila Road 1st Floor, Room 1600 Laguna Niguel, CA 92677\"\n}];\nexport const formatCardNumber = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 5) return phoneNumber;\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 9) {\n    return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4)}`;\n  }\n  if (phoneNumberLength < 13) {\n    return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4, 8)} ${phoneNumber.slice(4)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4, 8)} ${phoneNumber.slice(8, 12)}  ${phoneNumber.slice(12, 16)}`;\n};\nexport const formatExpireMonth = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 3) return phoneNumber;\n};\nexport const formatExpireYear = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 3) return phoneNumber;\n};\nexport const formatCVC = value => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n};\nexport const formatNumberOnly = value => {\n  if (!value) return value;\n  const pincode = value.replace(/[^\\d]/g, \"\");\n  return pincode;\n};","map":{"version":3,"names":["getCurrentUser","IpAddress","USDATEFORMAT","USCALDATEFORMAT","SUPERADMINROLEID","EMPLOYERADMINROLEID","EMPLOYEEROLEID","LAWFIRMADMINROLEID","ATTORNEYROLEID","ATTORNEYASSISTANTUSERROLEID","regexEmail","EMPLOYEEROLENAME","employeeRoleName","employerAdminRoleName","employerAssistantRoleName","PROVIDERADMINROLENAME","VISACAREADMINROLENAME","ATTORNEYROLENAME","ATTORNEYASSISTANTUSERROLENAME","LAWFIRMADMIN","PROVIDERSUPPORTROLENAME","UICHECKROLENAME","curentUser","specialCharactor","numbersOnly","usPhoneNumberFormat","emailIdFormat","PLANNAMEDYI","PLANNAMELEGAL","matchUPS1","matchUPS2","matchUSPS0","matchUSPS1","matchUSPS2","matchUSPS3","matchUSPS4","matchUSPS5","matchFedex1","matchFedex2","matchFedex3","caseNameJson","id","casename","urlName","workFlowJson","workFlowName","addressType","addressTypeName","formatFirstName","value","arr","split","i","length","charAt","toUpperCase","slice","firstName","join","formatSSNumber","ssNumber","replace","ssNumberLength","formatI94Number","newvalue","formatPhoneNumber","phoneNumber","phoneNumberLength","numbersOnlyFormat","arrayOneToThirty","serviceCenter","name","address","formatCardNumber","formatExpireMonth","formatExpireYear","formatCVC","formatNumberOnly","pincode"],"sources":["E:/react/WebUI_MH/src/containers/pages/Constants/ConstantValues.ts"],"sourcesContent":["import { getCurrentUser } from \"../../../store/selectors/Accounts\";\nexport const IpAddress = \"http://66.169.158.106:7000/\"\nexport const USDATEFORMAT = \"MM-dd-yyyy\"\nexport const USCALDATEFORMAT = \"mm/dd/yy\"\nexport const SUPERADMINROLEID = 18616\nexport const EMPLOYERADMINROLEID = 3\nexport const EMPLOYEEROLEID = 5\nexport const LAWFIRMADMINROLEID = 8\nexport const ATTORNEYROLEID = 9 \nexport const ATTORNEYASSISTANTUSERROLEID = 13\nexport const regexEmail = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nexport const EMPLOYEEROLENAME = \"EMPLOYEE\"\nexport const employeeRoleName = \"Employee\"\nexport const employerAdminRoleName = \"EmployerAdmin\"\nexport const employerAssistantRoleName = \"EmployerAssistant\"\nexport const PROVIDERADMINROLENAME = \"ProviderAdmin\"\nexport const VISACAREADMINROLENAME = \"VisaCareAdmin\" \nexport const ATTORNEYROLENAME = \"Attorney\"\nexport const ATTORNEYASSISTANTUSERROLENAME = \"Attorney Assistant\"\nexport const LAWFIRMADMIN = \"LawFirmAdmin\"\nexport const PROVIDERSUPPORTROLENAME = \"ProviderSupport\"\nexport const UICHECKROLENAME = \"UICHECK\"\n\nexport const curentUser = getCurrentUser();\nexport const specialCharactor = /[$!&=-]/;\nexport const numbersOnly = /^[0-9\\b]+$/;\nexport const usPhoneNumberFormat = /^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$/;\nexport const emailIdFormat = /^\\w+([\\.-]?\\w+)@\\w+([\\.-]?\\w+)(\\.\\w{2,3})+$/i;\nexport const PLANNAMEDYI = \"DIY\"\nexport const PLANNAMELEGAL = \"LEGAL\"\nexport const matchUPS1 = /\\b(1Z ?[0-9A-Z]{3} ?[0-9A-Z]{3} ?[0-9A-Z]{2} ?[0-9A-Z]{4} ?[0-9A-Z]{3} ?[0-9A-Z]|[\\dT]\\d\\d\\d ?\\d\\d\\d\\d ?\\d\\d\\d)\\b/;\nexport const matchUPS2 = /^[kKJj]{1}[0-9]{10}$/;\n\nexport const matchUSPS0 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)/;\nexport const matchUSPS1 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)|(\\b\\d{26}\\b)| ^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$| ^91[0-9]+$| ^[A-Za-z]{2}[0-9]+US$/i;\nexport const matchUSPS2 = /^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$/;\nexport const matchUSPS3 = /^91[0-9]+$/;\nexport const matchUSPS4 = /^[A-Za-z]{2}[0-9]+US$/;\nexport const matchUSPS5 = /(\\b\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20}\\b)|(\\b\\d{26}\\b)| ^E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21}$| ^91[0-9]+$| ^[A-Za-z]{2}[0-9]+US$/i;\n\nexport const matchFedex1 = /(\\b96\\d{20}\\b)|(\\b\\d{15}\\b)|(\\b\\d{12}\\b)/;\nexport const matchFedex2 = /\\b((98\\d\\d\\d\\d\\d?\\d\\d\\d\\d|98\\d\\d) ?\\d\\d\\d\\d ?\\d\\d\\d\\d( ?\\d\\d\\d)?)\\b/;\nexport const matchFedex3 = /^[0-9]{15}$/;\n\n\nexport const caseNameJson = [\n  { id: 22, casename: \"H1B Petition\", urlName: \"visaCareH1BCaseDetails\" },\n  { id: 23, casename: \"H4 Application\", urlName: \"visaCareH4CaseDetails\" },\n // { id: 24, casename: \"I140 Form\", urlName: \"visaCareI140CaseDetails\" },\n // { id: 25, casename: \"Labour Certification\", urlName: \"visaCareFLCCaseDetails\" },\n  { id: 26, casename: \"EAD Application\", urlName: \"visaCareI765CaseDetails\" }//,\n // { id: 27, casename: \"TN Petition\", urlName: \"visaCareTNPetitionDetails\" },\n//  { id: 28, casename: \"E3 Australian\", urlName: \"visaCareE3AustralianDetails\" },\n // { id: 29, casename: \"H1B1 Chile, Singapore\", urlName: \"visaCareH1B1CaseDetails\" }\n\n\n\n \n]\nexport const workFlowJson = [\n  { id: 1, workFlowName: \"Initiated\" },\n  { id: 2, workFlowName: \"InProgress\" },\n  { id: 3, workFlowName: \"LCA Certified\" },\n  { id: 4, workFlowName: \"Submitted\" },\n  { id: 5, workFlowName: \"COMPLETED\" },\n  { id: 6, workFlowName: \"Completed\" },\n]\nexport const addressType = [\n  { id: 1, addressType: \"PAD\", addressTypeName: \"\" },\n  { id: 2, addressType: \"BAD\", addressTypeName: \"\" },\n  { id: 3, addressType: \"BFA\", addressTypeName: \"\" },\n  { id: 4, addressType: \"EEA\", addressTypeName: \"\" },\n  { id: 5, addressType: \"PPA\", addressTypeName: \"\" },\n  { id: 6, addressType: \"H1B1A\", addressTypeName: \"\" }\n]\n\nexport const formatFirstName = (value: any) => {\n  const arr = value.split(\" \");\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\n\n  }\n  const firstName = arr.join(\" \");\n  return firstName;\n}\n \nexport const formatSSNumber = (value: any) => {\n  if (!value) return value;\n  const ssNumber = value.replace(/[^\\d]/g, \"\");\n  const ssNumberLength = ssNumber.length;\n  if (ssNumberLength < 4) return ssNumber;\n if (ssNumberLength < 6) {\n     return `${ssNumber.slice(0, 3)}-${ssNumber.slice(3)}`;\n   }\n  return `${ssNumber.slice(0, 3)}-${ssNumber.slice(3, 5)}-${ssNumber.slice(5, 9)}`;\n}\n\nexport const formatI94Number = (value: any) => {\n  if (!value) return value;\n var newvalue= value.split(' ').join('');\n  return newvalue.split('').join(' ');\n}\nexport const formatPhoneNumber = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 7) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n}\n\nexport const numbersOnlyFormat = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n\n \n}\nexport const arrayOneToThirty = [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }, { id: 6 }, { id: 7 }, { id: 8 }, { id: 9 }, { id: 10 },\n{ id: 11 }, { id: 12 }, { id: 13 }, { id: 14 }, { id: 15 }, { id: 16 }, { id: 17 }, { id: 18 }, { id: 19 }, { id: 20 },\n{ id: 21 }, { id: 22 }, { id: 23 }, { id: 24 }, { id: 25 }, { id: 26 }, { id: 27 }, { id: 28 }, { id: 29 }, { id: 30 }\n]\nexport const serviceCenter = [\n  { name: \"-Select-\", address: \"\" },\n  { name: \"Vermont Service Center (Non Premium)\", address: \"USCIS Vermont Service Center Attn: I-129 H-1B, 38 River Road Essex Junction, VT 05452\" },\n  { name: \"Vermont Service Center (Premium - CAP and Non CAP)\", address: \"USCIS Vermont Service Center Attn: I-129 H-1B,30 River Road Essex Junction, VT 05452-3808\" },\n  { name: \"Vermont Service Center (MASTER CAP SUBJECT)\", address: \"USCIS Vermont Service Center Attn: I-129 H-1B Master’s Cap, 38 River Road Suite 1000 Essex Junction, VT 05452\" },\n  { name: \"Vermont Service Center (REGULAR CAP SUBJECT)\", address: \"USCIS Vermont Service Center Attn: I-129 H-1B Regular Cap, 38 River Road Suite 1000Essex Junction, VT 05452\" },\n  { name: \"Nebraska Service Center (Non Premium)\", address: \"USCIS Nebraska Service Center  850 S Street Lincoln, NE 68508\" },\n  { name: \"Nebraska Service Center (Premium)\", address: \"USCIS Nebraska Service Center 850 S Street Lincoln, NE 68508\" },\n  { name: \"Nebraska Service Center (CAP SUBJECT)\", address: \"USCIS Nebraska Service Center 850 ‘S’ Street Room 129CAP Lincoln, NE 6850\" },\n  { name: \"Texas Service Center (Non Premium)\", address: \"USCIS Texas Service Center Attn: I-129 H1B 6046 N Belt Line Rd. Irving, Texas 75038-0001\" },\n  { name: \"Texas Service Center (Premium)\", address: \"USCIS Texas Service Center Attn: I-129 H1B Premium Processing 6046 N Belt Line Rd. STE 907 Irving, TX 75038-0022\" },\n  { name: \"Texas Service Center (CAP SUBJECT)\", address: \"USCIS TSC Attn: H-1B CAP Filings 6046 N Belt Line Rd. STE 107 Irving, TX 75038-0001\" },\n  { name: \"Texas Service Center (PREMIUM CAP SUBJECT)\", address: \"USCIS TSC Attn: I-129 CAP Premium Processing 6046 N Belt Line Rd. STE 907 Irving, TX 75038-0022\" },\n  { name: \"California Service Center (Non Premium)\", address: \"USCIS California Service Center Attn: I-129 H-1B Extensions 24000 Avila Road 2nd Floor, Room 2312 Laguna Niguel, CA 92677\" },\n  { name: \"California Service Center (Premium)\", address: \"Premium Processing Service USCIS California Service Center Attn: I-129 H-1B Extensions 24000 Avila Road 2nd Floor, Room 2312 Laguna Niguel, CA 92677\" },\n  { name: \"California Service Center (REGULAR-CAP SUBJECT)\", address: \"USCIS California Service Center Attn: I-129 H-1B Regular Cap 24000 Avila Road 1st Floor, Room 1600 Laguna Niguel, CA 92677\" },\n  { name: \"California Service Center (MASTER-CAP SUBJECT)\", address: \"USCIS California Service CenterAttn: I-129 H-1B Master’s Cap 24000 Avila Road 1st Floor, Room 1600 Laguna Niguel, CA 92677\" }\n]\n\n\n\nexport const formatCardNumber = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 5) return phoneNumber;\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 9) {\n    return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4)}`;\n  }\n\n  if (phoneNumberLength < 13) {\n    return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4, 8)} ${phoneNumber.slice(4)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `${phoneNumber.slice(0, 4)} ${phoneNumber.slice(4, 8)} ${phoneNumber.slice(8, 12)}  ${phoneNumber.slice(12, 16)}`;\n}\n\nexport const formatExpireMonth = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 3) return phoneNumber;\n\n}\nexport const formatExpireYear = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 3) return phoneNumber;\n\n}\nexport const formatCVC = (value: any) => {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n\n}\nexport const formatNumberOnly = (value: any) => {\n  if (!value) return value;\n  const pincode = value.replace(/[^\\d]/g, \"\"); \n  return pincode;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}