{"ast":null,"code":"/** Text hyphenation in Javascript.\n *  Copyright (C) 2021 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the ISC license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function () {\n  var NUMS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"];\n  function createIterator(str) {\n    var i = 0;\n    function next() {\n      return str[i++];\n    }\n    return next;\n  }\n  function createPatternTree(patterns) {\n    var pattern,\n      symb,\n      maxPatternLength = 0,\n      patternTree = [{}],\n      nextPattern = createIterator(patterns);\n    while (pattern = nextPattern()) {\n      var ptr = patternTree,\n        symb,\n        weights = [],\n        patternLength = 0,\n        prevSymbIsNumber = false,\n        nextSymbol = createIterator(pattern.split(\"\"));\n      while (symb = nextSymbol()) {\n        if (NUMS.indexOf(symb) > -1) {\n          weights.push(parseInt(symb));\n          prevSymbIsNumber = true;\n        } else {\n          if (!prevSymbIsNumber && symb !== \".\") {\n            weights.push(0);\n          }\n          if (symb !== \".\") {\n            patternLength++;\n          }\n          ptr[0][symb] = ptr[0][symb] || [{}];\n          ptr = ptr[0][symb];\n          prevSymbIsNumber = false;\n        }\n      }\n      while (weights[weights.length - 1] === 0) {\n        weights.pop();\n      }\n      ptr[1] = weights;\n      ptr[2] = pattern;\n      if (maxPatternLength < patternLength) {\n        maxPatternLength = patternLength;\n      }\n    }\n    return [patternTree[0], maxPatternLength];\n  }\n  function createTextChunkReader(text, hyphenChar, skipHTML, minWordLength) {\n    function readNextTextChunk() {\n      var nextTextChunk = \"\";\n      shouldHyphenate = void 0;\n      chunkReader: while (nextCharIndex <= text.length) {\n        var nextChar = text.charAt(nextCharIndex++),\n          charIsLetter = !!nextChar && !/\\s|[\\!-\\@\\[-\\`\\{-\\~\\u2013-\\u203C]/.test(nextChar) || nextChar === \"'\",\n          charIsAngleOpen = nextChar === \"<\",\n          charIsAngleClose = nextChar === \">\",\n          charIsHyphen = nextChar === hyphenChar;\n        do {\n          if (state === STATE_READ_TAG) {\n            if (charIsAngleClose) {\n              state = STATE_RETURN_UNTOUCHED;\n            }\n            break;\n          }\n          if (charIsHyphen) {\n            shouldHyphenate = SHOULD_SKIP;\n            state = STATE_READ_WORD;\n            break;\n          }\n          if (charIsLetter) {\n            state = STATE_READ_WORD;\n            break;\n          }\n          if (state === STATE_READ_WORD) {\n            state = STATE_RETURN_WORD;\n            shouldHyphenate = shouldHyphenate || nextTextChunk.length >= minWordLength && SHOULD_HYPHENATE;\n            break;\n          }\n          shouldHyphenate = SHOULD_SKIP;\n          state = STATE_RETURN_UNTOUCHED;\n        } while (0);\n        if (charIsAngleOpen && state !== STATE_RETURN_WORD && skipHTML && !isSpacelike(text.charAt(nextCharIndex))) {\n          shouldHyphenate = SHOULD_SKIP;\n          state = STATE_READ_TAG;\n        }\n        switch (state) {\n          case STATE_READ_TAG:\n            nextTextChunk += nextChar;\n            break;\n          case STATE_READ_WORD:\n            nextTextChunk += nextChar;\n            break;\n          case STATE_RETURN_UNTOUCHED:\n            nextTextChunk += nextChar;\n            break chunkReader;\n          case STATE_RETURN_WORD:\n            nextCharIndex--;\n            break chunkReader;\n        }\n      }\n      return nextTextChunk || void 0;\n    }\n    function shouldNextHyphenate() {\n      return shouldHyphenate === SHOULD_HYPHENATE;\n    }\n    var isSpacelike = RegExp.prototype.test.bind(/\\s/);\n    var nextCharIndex = 0,\n      SHOULD_HYPHENATE = 1,\n      SHOULD_SKIP = 2,\n      shouldHyphenate,\n      STATE_READ_TAG = 1,\n      STATE_READ_WORD = 2,\n      STATE_RETURN_UNTOUCHED = 3,\n      STATE_RETURN_WORD = 4,\n      state;\n    return [readNextTextChunk, shouldNextHyphenate];\n  }\n  function createCharIterator(str) {\n    var i = 0;\n    function nextChar() {\n      return str[i++];\n    }\n    function isLastLetter() {\n      return str.length === i + 1;\n    }\n    return [nextChar, isLastLetter];\n  }\n  function createStringSlicer(str) {\n    var i = 0,\n      slice = str;\n    function next() {\n      slice = str.slice(i++);\n      if (slice.length < 3) {\n        return;\n      }\n      return slice;\n    }\n    function isFirstCharacter() {\n      return i === 2;\n    }\n    return [next, isFirstCharacter];\n  }\n  function hyphenateWord(text, patternTree, debug, hyphenChar) {\n    var levels = new Array(text.length + 1),\n      loweredText = (\".\" + text.toLocaleLowerCase() + \".\").split(\"\"),\n      p = [],\n      wordSlice,\n      letter,\n      treePtr,\n      nextPtr,\n      patternLevels,\n      patternEntityIndex = -1,\n      slicer,\n      nextSlice,\n      isFirstCharacter,\n      charIterator,\n      nextLetter,\n      isLastLetter;\n    for (var i = levels.length; i--;) levels[i] = 0;\n    slicer = createStringSlicer(loweredText);\n    nextSlice = slicer[0];\n    isFirstCharacter = slicer[1];\n    while (wordSlice = nextSlice()) {\n      patternEntityIndex++;\n      if (isFirstCharacter()) {\n        patternEntityIndex--;\n      }\n      treePtr = patternTree;\n      charIterator = createCharIterator(wordSlice);\n      nextLetter = charIterator[0];\n      isLastLetter = charIterator[1];\n      while (letter = nextLetter()) {\n        if (treePtr[letter] === void 0) {\n          break;\n        }\n        nextPtr = treePtr[letter];\n        treePtr = nextPtr[0];\n        patternLevels = nextPtr[1];\n        if (isLastLetter()) {\n          continue;\n        }\n        if (patternLevels === void 0) {\n          continue;\n        }\n        for (var k = 0; k < patternLevels.length; k++) levels[patternEntityIndex + k] = Math.max(patternLevels[k], levels[patternEntityIndex + k]);\n      }\n    }\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[levels.length - 2] = 0;\n    var hyphenatedText = \"\",\n      leveledText = \"\",\n      debugHyphenatedText = \"\";\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText += (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n      if (debug) {\n        debugHyphenatedText += (levels[i] % 2 === 1 ? \"-\" : \"\") + text.charAt(i);\n        leveledText += (levels[i] > 0 ? levels[i] : \"\") + text.charAt(i);\n      }\n    }\n    if (debug) console.log.apply(console, [text, \"->\"].concat(p).concat([\"->\"]).concat(levels).concat([\"->\", leveledText]).concat([\"->\", debugHyphenatedText]));\n    return hyphenatedText;\n  }\n  function start(text, patterns, cache, debug, hyphenChar, skipHTML, minWordLength, isAsync) {\n    function done() {\n      allTime = /* @__PURE__ */new Date() - allTime;\n      resolveNewText(newText);\n      if (debug) {\n        console.log(\"----------------\\nHyphenation stats: \" + processedN + \" text chunks processed, \" + hyphenatedN + \" words hyphenated\");\n        console.log(\"Work time: \" + workTime / 1e3);\n        console.log(\"Wait time: \" + (allTime - workTime) / 1e3);\n        console.log(\"All time: \" + allTime / 1e3);\n      }\n    }\n    var cacheKey,\n      newText = \"\",\n      textChunk,\n      reader = createTextChunkReader(text, hyphenChar, skipHTML, minWordLength),\n      readNextTextChunk = reader[0],\n      shouldNextHyphenate = reader[1],\n      processedN = 0,\n      hyphenatedN = 0;\n    var allTime = /* @__PURE__ */new Date(),\n      workTime = 0;\n    var resolveNewText = function () {};\n    function nextTick() {\n      var loopStart = /* @__PURE__ */new Date();\n      while ((!isAsync || /* @__PURE__ */new Date() - loopStart < 10) && (textChunk = readNextTextChunk())) {\n        cacheKey = textChunk.length ? \"$\" + textChunk : \"\";\n        if (shouldNextHyphenate()) {\n          if (cache[cacheKey] === void 0) {\n            cache[cacheKey] = hyphenateWord(textChunk, patterns, debug, hyphenChar);\n          }\n          if (textChunk !== cache[cacheKey]) {\n            hyphenatedN++;\n          }\n          textChunk = cache[cacheKey];\n        }\n        newText += textChunk;\n        processedN++;\n      }\n      workTime += /* @__PURE__ */new Date() - loopStart;\n      if (!textChunk) {\n        done();\n      } else {\n        setTimeout(nextTick);\n      }\n    }\n    if (isAsync) {\n      setTimeout(nextTick);\n      return new Promise(function (resolve) {\n        resolveNewText = resolve;\n      });\n    } else {\n      nextTick();\n      return newText;\n    }\n  }\n  var SETTING_DEFAULT_ASYNC = false;\n  var SETTING_DEFAULT_DEBUG = false;\n  var SETTING_DEFAULT_HTML = false;\n  var SETTING_DEFAULT_HYPH_CHAR = \"\\xAD\";\n  var SETTING_DEFAULT_MIN_WORD_LENGTH = 5;\n  var SETTING_NAME_ASYNC = \"async\";\n  var SETTING_NAME_DEBUG = \"debug\";\n  var SETTING_NAME_HTML = \"html\";\n  var SETTING_NAME_HYPH_CHAR = \"hyphenChar\";\n  var SETTING_NAME_MIN_WORD_LENGTH = \"minWordLength\";\n  var _global = typeof global === \"object\" ? global : typeof window === \"object\" ? window : typeof self === \"object\" ? self : false ? void 0 : {};\n  function cloneObj(source) {\n    var target = {};\n    for (var key in source) {\n      target[key] = source[key];\n    }\n    return target;\n  }\n  function keyOrDefault(object, key, defaultValue) {\n    if (key in object) {\n      return object[key];\n    }\n    return defaultValue;\n  }\n  function exceptionsFromDefinition(patternsDefinition, hyphenChar) {\n    return patternsDefinition.exceptions.reduce(function (exceptions, exception) {\n      exceptions[exception.replace(/\\-/g, \"\")] = exception.replace(/\\-/g, hyphenChar);\n      return exceptions;\n    }, {});\n  }\n  function createHyphenator(patternsDefinition, options) {\n    options = options || {};\n    var asyncMode = keyOrDefault(options, SETTING_NAME_ASYNC, SETTING_DEFAULT_ASYNC),\n      caches = {},\n      debug = keyOrDefault(options, SETTING_NAME_DEBUG, SETTING_DEFAULT_DEBUG),\n      exceptions = {},\n      hyphenChar = keyOrDefault(options, SETTING_NAME_HYPH_CHAR, SETTING_DEFAULT_HYPH_CHAR),\n      patterns = createPatternTree(patternsDefinition.patterns.filter(function (p) {\n        return p !== \" \" && p !== \"\";\n      }))[0],\n      minWordLength = keyOrDefault(options, SETTING_NAME_MIN_WORD_LENGTH, SETTING_DEFAULT_MIN_WORD_LENGTH) >> 0,\n      skipHTML = keyOrDefault(options, SETTING_NAME_HTML, SETTING_DEFAULT_HTML);\n    var cacheKey = hyphenChar + minWordLength;\n    exceptions[cacheKey] = exceptionsFromDefinition(patternsDefinition, hyphenChar);\n    caches[cacheKey] = cloneObj(exceptions[cacheKey]);\n    if (asyncMode && !(\"Promise\" in _global)) {\n      throw new Error(\"Failed to create hyphenator: Could not find global Promise object, needed for hyphenator to work in async mode\");\n    }\n    return function (text, options2) {\n      options2 = options2 || {};\n      var localDebug = keyOrDefault(options2, SETTING_NAME_DEBUG, debug),\n        localHyphenChar = keyOrDefault(options2, SETTING_NAME_HYPH_CHAR, hyphenChar),\n        localMinWordLength = keyOrDefault(options2, SETTING_NAME_MIN_WORD_LENGTH, minWordLength) >> 0,\n        cacheKey2 = localHyphenChar + localMinWordLength;\n      if (!exceptions[cacheKey2]) {\n        exceptions[cacheKey2] = exceptionsFromDefinition(patternsDefinition, localHyphenChar);\n      }\n      if (!caches[cacheKey2]) {\n        caches[cacheKey2] = cloneObj(exceptions[cacheKey2]);\n      }\n      return start(text, patterns, caches[cacheKey2], localDebug, localHyphenChar, skipHTML, localMinWordLength, asyncMode);\n    };\n  }\n  return createHyphenator;\n});","map":{"version":3,"names":["root","factory","define","amd","module","exports","createHyphenator","NUMS","createIterator","str","i","next","createPatternTree","patterns","pattern","symb","maxPatternLength","patternTree","nextPattern","ptr","weights","patternLength","prevSymbIsNumber","nextSymbol","split","indexOf","push","parseInt","length","pop","createTextChunkReader","text","hyphenChar","skipHTML","minWordLength","readNextTextChunk","nextTextChunk","shouldHyphenate","chunkReader","nextCharIndex","nextChar","charAt","charIsLetter","test","charIsAngleOpen","charIsAngleClose","charIsHyphen","state","STATE_READ_TAG","STATE_RETURN_UNTOUCHED","SHOULD_SKIP","STATE_READ_WORD","STATE_RETURN_WORD","SHOULD_HYPHENATE","isSpacelike","shouldNextHyphenate","RegExp","prototype","bind","createCharIterator","isLastLetter","createStringSlicer","slice","isFirstCharacter","hyphenateWord","debug","levels","Array","loweredText","toLocaleLowerCase","p","wordSlice","letter","treePtr","nextPtr","patternLevels","patternEntityIndex","slicer","nextSlice","charIterator","nextLetter","k","Math","max","hyphenatedText","leveledText","debugHyphenatedText","console","log","apply","concat","start","cache","isAsync","done","allTime","Date","resolveNewText","newText","processedN","hyphenatedN","workTime","cacheKey","textChunk","reader","nextTick","loopStart","setTimeout","Promise","resolve","SETTING_DEFAULT_ASYNC","SETTING_DEFAULT_DEBUG","SETTING_DEFAULT_HTML","SETTING_DEFAULT_HYPH_CHAR","SETTING_DEFAULT_MIN_WORD_LENGTH","SETTING_NAME_ASYNC","SETTING_NAME_DEBUG","SETTING_NAME_HTML","SETTING_NAME_HYPH_CHAR","SETTING_NAME_MIN_WORD_LENGTH","_global","global","window","self","cloneObj","source","target","key","keyOrDefault","object","defaultValue","exceptionsFromDefinition","patternsDefinition","exceptions","reduce","exception","replace","options","asyncMode","caches","filter","Error","options2","localDebug","localHyphenChar","localMinWordLength","cacheKey2"],"sources":["E:/react/WebUI_MH/node_modules/hyphen/hyphen.js"],"sourcesContent":["/** Text hyphenation in Javascript.\n *  Copyright (C) 2021 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the ISC license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function () {\n  var NUMS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"];\n  function createIterator(str) {\n    var i = 0;\n    function next() {\n      return str[i++];\n    }\n    return next;\n  }\n  function createPatternTree(patterns) {\n    var pattern,\n      symb,\n      maxPatternLength = 0,\n      patternTree = [{}],\n      nextPattern = createIterator(patterns);\n    while ((pattern = nextPattern())) {\n      var ptr = patternTree,\n        symb,\n        weights = [],\n        patternLength = 0,\n        prevSymbIsNumber = false,\n        nextSymbol = createIterator(pattern.split(\"\"));\n      while ((symb = nextSymbol())) {\n        if (NUMS.indexOf(symb) > -1) {\n          weights.push(parseInt(symb));\n          prevSymbIsNumber = true;\n        } else {\n          if (!prevSymbIsNumber && symb !== \".\") {\n            weights.push(0);\n          }\n          if (symb !== \".\") {\n            patternLength++;\n          }\n          ptr[0][symb] = ptr[0][symb] || [{}];\n          ptr = ptr[0][symb];\n          prevSymbIsNumber = false;\n        }\n      }\n      while (weights[weights.length - 1] === 0) {\n        weights.pop();\n      }\n      ptr[1] = weights;\n      ptr[2] = pattern;\n      if (maxPatternLength < patternLength) {\n        maxPatternLength = patternLength;\n      }\n    }\n    return [patternTree[0], maxPatternLength];\n  }\n\n  function createTextChunkReader(text, hyphenChar, skipHTML, minWordLength) {\n    function readNextTextChunk() {\n      var nextTextChunk = \"\";\n      shouldHyphenate = void 0;\n      chunkReader: while (nextCharIndex <= text.length) {\n        var nextChar = text.charAt(nextCharIndex++),\n          charIsLetter =\n            (!!nextChar &&\n              !/\\s|[\\!-\\@\\[-\\`\\{-\\~\\u2013-\\u203C]/.test(nextChar)) ||\n            nextChar === \"'\",\n          charIsAngleOpen = nextChar === \"<\",\n          charIsAngleClose = nextChar === \">\",\n          charIsHyphen = nextChar === hyphenChar;\n        do {\n          if (state === STATE_READ_TAG) {\n            if (charIsAngleClose) {\n              state = STATE_RETURN_UNTOUCHED;\n            }\n            break;\n          }\n          if (charIsHyphen) {\n            shouldHyphenate = SHOULD_SKIP;\n            state = STATE_READ_WORD;\n            break;\n          }\n          if (charIsLetter) {\n            state = STATE_READ_WORD;\n            break;\n          }\n          if (state === STATE_READ_WORD) {\n            state = STATE_RETURN_WORD;\n            shouldHyphenate =\n              shouldHyphenate ||\n              (nextTextChunk.length >= minWordLength && SHOULD_HYPHENATE);\n            break;\n          }\n          shouldHyphenate = SHOULD_SKIP;\n          state = STATE_RETURN_UNTOUCHED;\n        } while (0);\n        if (\n          charIsAngleOpen &&\n          state !== STATE_RETURN_WORD &&\n          skipHTML &&\n          !isSpacelike(text.charAt(nextCharIndex))\n        ) {\n          shouldHyphenate = SHOULD_SKIP;\n          state = STATE_READ_TAG;\n        }\n        switch (state) {\n          case STATE_READ_TAG:\n            nextTextChunk += nextChar;\n            break;\n          case STATE_READ_WORD:\n            nextTextChunk += nextChar;\n            break;\n          case STATE_RETURN_UNTOUCHED:\n            nextTextChunk += nextChar;\n            break chunkReader;\n          case STATE_RETURN_WORD:\n            nextCharIndex--;\n            break chunkReader;\n        }\n      }\n      return nextTextChunk || void 0;\n    }\n    function shouldNextHyphenate() {\n      return shouldHyphenate === SHOULD_HYPHENATE;\n    }\n    var isSpacelike = RegExp.prototype.test.bind(/\\s/);\n    var nextCharIndex = 0,\n      SHOULD_HYPHENATE = 1,\n      SHOULD_SKIP = 2,\n      shouldHyphenate,\n      STATE_READ_TAG = 1,\n      STATE_READ_WORD = 2,\n      STATE_RETURN_UNTOUCHED = 3,\n      STATE_RETURN_WORD = 4,\n      state;\n    return [readNextTextChunk, shouldNextHyphenate];\n  }\n\n  function createCharIterator(str) {\n    var i = 0;\n    function nextChar() {\n      return str[i++];\n    }\n    function isLastLetter() {\n      return str.length === i + 1;\n    }\n    return [nextChar, isLastLetter];\n  }\n  function createStringSlicer(str) {\n    var i = 0,\n      slice = str;\n    function next() {\n      slice = str.slice(i++);\n      if (slice.length < 3) {\n        return;\n      }\n      return slice;\n    }\n    function isFirstCharacter() {\n      return i === 2;\n    }\n    return [next, isFirstCharacter];\n  }\n  function hyphenateWord(text, patternTree, debug, hyphenChar) {\n    var levels = new Array(text.length + 1),\n      loweredText = (\".\" + text.toLocaleLowerCase() + \".\").split(\"\"),\n      p = [],\n      wordSlice,\n      letter,\n      treePtr,\n      nextPtr,\n      patternLevels,\n      patternEntityIndex = -1,\n      slicer,\n      nextSlice,\n      isFirstCharacter,\n      charIterator,\n      nextLetter,\n      isLastLetter;\n    for (var i = levels.length; i--; ) levels[i] = 0;\n    slicer = createStringSlicer(loweredText);\n    nextSlice = slicer[0];\n    isFirstCharacter = slicer[1];\n    while ((wordSlice = nextSlice())) {\n      patternEntityIndex++;\n      if (isFirstCharacter()) {\n        patternEntityIndex--;\n      }\n      treePtr = patternTree;\n      charIterator = createCharIterator(wordSlice);\n      nextLetter = charIterator[0];\n      isLastLetter = charIterator[1];\n      while ((letter = nextLetter())) {\n        if (treePtr[letter] === void 0) {\n          break;\n        }\n        nextPtr = treePtr[letter];\n        treePtr = nextPtr[0];\n        patternLevels = nextPtr[1];\n        if (isLastLetter()) {\n          continue;\n        }\n        if (patternLevels === void 0) {\n          continue;\n        }\n        for (var k = 0; k < patternLevels.length; k++)\n          levels[patternEntityIndex + k] = Math.max(\n            patternLevels[k],\n            levels[patternEntityIndex + k]\n          );\n      }\n    }\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[\n      levels.length - 2\n    ] = 0;\n    var hyphenatedText = \"\",\n      leveledText = \"\",\n      debugHyphenatedText = \"\";\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText +=\n        (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n      if (debug) {\n        debugHyphenatedText +=\n          (levels[i] % 2 === 1 ? \"-\" : \"\") + text.charAt(i);\n        leveledText += (levels[i] > 0 ? levels[i] : \"\") + text.charAt(i);\n      }\n    }\n    if (debug)\n      console.log.apply(\n        console,\n        [text, \"->\"]\n          .concat(p)\n          .concat([\"->\"])\n          .concat(levels)\n          .concat([\"->\", leveledText])\n          .concat([\"->\", debugHyphenatedText])\n      );\n    return hyphenatedText;\n  }\n\n  function start(\n    text,\n    patterns,\n    cache,\n    debug,\n    hyphenChar,\n    skipHTML,\n    minWordLength,\n    isAsync\n  ) {\n    function done() {\n      allTime = /* @__PURE__ */ new Date() - allTime;\n      resolveNewText(newText);\n      if (debug) {\n        console.log(\n          \"----------------\\nHyphenation stats: \" +\n            processedN +\n            \" text chunks processed, \" +\n            hyphenatedN +\n            \" words hyphenated\"\n        );\n        console.log(\"Work time: \" + workTime / 1e3);\n        console.log(\"Wait time: \" + (allTime - workTime) / 1e3);\n        console.log(\"All time: \" + allTime / 1e3);\n      }\n    }\n    var cacheKey,\n      newText = \"\",\n      textChunk,\n      reader = createTextChunkReader(text, hyphenChar, skipHTML, minWordLength),\n      readNextTextChunk = reader[0],\n      shouldNextHyphenate = reader[1],\n      processedN = 0,\n      hyphenatedN = 0;\n    var allTime = /* @__PURE__ */ new Date(),\n      workTime = 0;\n    var resolveNewText = function () {};\n    function nextTick() {\n      var loopStart = /* @__PURE__ */ new Date();\n      while (\n        (!isAsync || /* @__PURE__ */ new Date() - loopStart < 10) &&\n        (textChunk = readNextTextChunk())\n      ) {\n        cacheKey = textChunk.length ? \"$\" + textChunk : \"\";\n        if (shouldNextHyphenate()) {\n          if (cache[cacheKey] === void 0) {\n            cache[cacheKey] = hyphenateWord(\n              textChunk,\n              patterns,\n              debug,\n              hyphenChar\n            );\n          }\n          if (textChunk !== cache[cacheKey]) {\n            hyphenatedN++;\n          }\n          textChunk = cache[cacheKey];\n        }\n        newText += textChunk;\n        processedN++;\n      }\n      workTime += /* @__PURE__ */ new Date() - loopStart;\n      if (!textChunk) {\n        done();\n      } else {\n        setTimeout(nextTick);\n      }\n    }\n    if (isAsync) {\n      setTimeout(nextTick);\n      return new Promise(function (resolve) {\n        resolveNewText = resolve;\n      });\n    } else {\n      nextTick();\n      return newText;\n    }\n  }\n\n  var SETTING_DEFAULT_ASYNC = false;\n  var SETTING_DEFAULT_DEBUG = false;\n  var SETTING_DEFAULT_HTML = false;\n  var SETTING_DEFAULT_HYPH_CHAR = \"\\xAD\";\n  var SETTING_DEFAULT_MIN_WORD_LENGTH = 5;\n  var SETTING_NAME_ASYNC = \"async\";\n  var SETTING_NAME_DEBUG = \"debug\";\n  var SETTING_NAME_HTML = \"html\";\n  var SETTING_NAME_HYPH_CHAR = \"hyphenChar\";\n  var SETTING_NAME_MIN_WORD_LENGTH = \"minWordLength\";\n  var _global =\n    typeof global === \"object\"\n      ? global\n      : typeof window === \"object\"\n      ? window\n      : typeof self === \"object\"\n      ? self\n      : false\n      ? void 0\n      : {};\n  function cloneObj(source) {\n    var target = {};\n    for (var key in source) {\n      target[key] = source[key];\n    }\n    return target;\n  }\n  function keyOrDefault(object, key, defaultValue) {\n    if (key in object) {\n      return object[key];\n    }\n    return defaultValue;\n  }\n  function exceptionsFromDefinition(patternsDefinition, hyphenChar) {\n    return patternsDefinition.exceptions.reduce(function (\n      exceptions,\n      exception\n    ) {\n      exceptions[exception.replace(/\\-/g, \"\")] = exception.replace(\n        /\\-/g,\n        hyphenChar\n      );\n      return exceptions;\n    },\n    {});\n  }\n  function createHyphenator(patternsDefinition, options) {\n    options = options || {};\n    var asyncMode = keyOrDefault(\n        options,\n        SETTING_NAME_ASYNC,\n        SETTING_DEFAULT_ASYNC\n      ),\n      caches = {},\n      debug = keyOrDefault(options, SETTING_NAME_DEBUG, SETTING_DEFAULT_DEBUG),\n      exceptions = {},\n      hyphenChar = keyOrDefault(\n        options,\n        SETTING_NAME_HYPH_CHAR,\n        SETTING_DEFAULT_HYPH_CHAR\n      ),\n      patterns = createPatternTree(\n        patternsDefinition.patterns.filter(function (p) {\n          return p !== \" \" && p !== \"\";\n        })\n      )[0],\n      minWordLength =\n        keyOrDefault(\n          options,\n          SETTING_NAME_MIN_WORD_LENGTH,\n          SETTING_DEFAULT_MIN_WORD_LENGTH\n        ) >> 0,\n      skipHTML = keyOrDefault(options, SETTING_NAME_HTML, SETTING_DEFAULT_HTML);\n    var cacheKey = hyphenChar + minWordLength;\n    exceptions[cacheKey] = exceptionsFromDefinition(\n      patternsDefinition,\n      hyphenChar\n    );\n    caches[cacheKey] = cloneObj(exceptions[cacheKey]);\n    if (asyncMode && !(\"Promise\" in _global)) {\n      throw new Error(\n        \"Failed to create hyphenator: Could not find global Promise object, needed for hyphenator to work in async mode\"\n      );\n    }\n    return function (text, options2) {\n      options2 = options2 || {};\n      var localDebug = keyOrDefault(options2, SETTING_NAME_DEBUG, debug),\n        localHyphenChar = keyOrDefault(\n          options2,\n          SETTING_NAME_HYPH_CHAR,\n          hyphenChar\n        ),\n        localMinWordLength =\n          keyOrDefault(options2, SETTING_NAME_MIN_WORD_LENGTH, minWordLength) >>\n          0,\n        cacheKey2 = localHyphenChar + localMinWordLength;\n      if (!exceptions[cacheKey2]) {\n        exceptions[cacheKey2] = exceptionsFromDefinition(\n          patternsDefinition,\n          localHyphenChar\n        );\n      }\n      if (!caches[cacheKey2]) {\n        caches[cacheKey2] = cloneObj(exceptions[cacheKey2]);\n      }\n      return start(\n        text,\n        patterns,\n        caches[cacheKey2],\n        localDebug,\n        localHyphenChar,\n        skipHTML,\n        localMinWordLength,\n        asyncMode\n      );\n    };\n  }\n\n  return createHyphenator;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}